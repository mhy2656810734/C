//输入描述：
//第一行输入两个正整数分别是 n 和 i ，表示数组的长度、需要添加节点的位置和节点的值
//第二行输入 n 个正整数表示数组中每个元素的值。
//
//输出描述：
//把数组转换成链表并在第 i 个节点后的添加一个新节点值，新节点的值是 i。

#include<stdio.h>
#include<stdlib.h>
#include<assert.h>
typedef struct SListNode
{
    int data;
    struct SList* next;
}SLNode;

//创建新节点的
SLNode* BuySListNode(int x)
{
    SLNode* newnode = (SLNode*)malloc(sizeof(SLNode));
    if (newnode == NULL)
    {
        perror("");
        exit(-1);
    }
    else
    {
        newnode->data = x;
        newnode->next = NULL;
        return newnode;
    }
}

//尾插数据
void SListPushBack(SLNode** pphead, int x)
{
    SLNode* newnode = BuySListNode(x);
    if (newnode == NULL)
    {
        perror("");
        exit(-1);
    }
    else
    {
        if (*pphead == NULL)
        {
            *pphead = newnode;
        }
        else
        {
            //找尾指针
            SLNode* tail = *pphead;
            while (tail->next != NULL)
            {
                tail = tail->next;
            }
            tail->next = newnode;
        }
    }
}

//查找数据
SLNode*SListFind(SLNode** pphead,int x)
{
    assert(*pphead);
    SLNode*cur=*pphead;
    while(cur)
    {   if(cur->data==x)
        {
        return cur;
        }
        cur=cur->next;
    }
    return NULL;
}
//删除结点
void SListErase(SLNode** pphead,SLNode*pos)
{
    assert(pos);
    assert(*pphead);
    SLNode*cur=*pphead;
    while(cur->next!=pos)
    {
        cur=cur->next;
    }
    cur->next=pos->next;
    free(pos);
    pos=NULL;
    
}
//打印数据
void SListPrint(SLNode** pphead)
{
    SLNode* cur = *pphead;
    while (cur!=NULL)
    {
         printf("%d ", cur->data);
       cur = cur->next;
    }
}

int main()
{
    SLNode* sl = NULL;
    int n = 0;
    int m=0;
    int arr[100]={0};
    scanf("%d %d", &n,&m);
    int x = 0;
    int i=0;
    for(i=0;i<n;i++)
    {
        scanf("%d",&arr[i]);
    }
    for(i=0;i<=n;i++)
    {
        if(i==m)
        {
            int j=n-1;
           while(j>=i)
           {
               arr[j+1]=arr[j];
               j--;
           }
            arr[m]=m;
        }
    }
    for(i=0;i<=n;i++)
    {
        SListPushBack(&sl, arr[i]);
    }
    SListPrint(&sl);
    return 0;
}
