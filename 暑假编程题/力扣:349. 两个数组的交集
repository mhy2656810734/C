int cmp(const void *a, const void *b){                  //按升序排序
    return (*(int*)a - *(int*)b);
}

int* intersection(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize){
    int* res = (int*)malloc(sizeof(int) * nums1Size);   //结果数组
    *returnSize = 0;

    qsort(nums1, nums1Size, sizeof(nums1[0]), cmp);     //num1排序
    qsort(nums2, nums2Size, sizeof(nums2[0]), cmp);     //num2排序

    for(int i=0, j=0; i < nums1Size; ++i){              //遍历num1
        if(i != 0 && nums1[i] == nums1[i-1])            //跳过重复值
            continue;
        int low = 0, high = nums2Size-1, mid;       
        while(low <= high){                             //二分法查找num2中是否有同样的值
            mid = (low + high) / 2;
            if(nums2[mid] == nums1[i]){                 //有同样的值则存入结果数组
                res[j++] = nums1[i];
                (*returnSize)++;
                break;
            }else if(nums2[mid] < nums1[i])
                low = mid+1;
            else
                high = mid-1;
        }
    }

    return res;
}
