//简单冒泡排序
#include<stdio.h>
void bubble_sort(int arr[],int sz)
{
	int i=0;
	//趟数 
	for(i=0;i<sz-1;i++)
	{
  //作为标记来观察数组是不是已经排好了
			int flag=1;
		int j=0;
		//每一趟需要比较的对数
		for(j=0;j<sz-1-i;j++)
		{
			if(arr[j]>arr[j+1])
			{
				int temp=arr[j];
				arr[j]=arr[j+1];
				arr[j+1]=temp; 
				flag=0; 
			}
		 } 
		 if(flag==1)
		 {
		 	break;
		 }
	}
}
int main()
{
	int arr[]={9,8,7,6,5,4,3,2,1};
	int sz=sizeof(arr)/sizeof(arr[0]);
	bubble_sort(arr,sz);
	int i=0;
	for(i=0;i<sz;i++)
	{
		printf("%d ",arr[i]);
	}
	return 0;
 } 
 
 //使用联合体求机器字节存储是大端模式还是小端模式
 #include<stdio.h>
int check_sys()
{
	union Un
	{
		char c;
		int i;
	}u;
	u.i = 1;
	return u.c;
}
int main()
{
	int ret = check_sys();
	if (ret == 1)
	{
		printf("小端");
	}
	else
		printf("大端");
	return 0;
}

//使用qsort库函数进行整型冒泡排序

#include<stdio.h>
#include<stdlib.h>
int cmp_int(const void* e1,const void* e2)
{
	return *(int*)e1-*(int*)e2; //强制转换成int* 型
}
int main()
{
	int arr[]={9,8,7,6,5,4,3,2,1};
	int sz=sizeof(arr)/sizeof(arr[0]);
	qsort(arr,sz,sizeof(arr[0]),cmp_int);//注意qsort的四个参数
	int i=0;
	for(i=0;i<sz;i++)
	{
		printf("%d ",arr[i]);
	}
	return 0;
}

//使用qsort库函数进行浮点型冒泡排序
#include<stdio.h>
#include<stdlib.h>
int cmp_float(const void* e1,const void* e2)
{
	return (int)(*(float*)e1-*(float*)e2);
}
int main()
{
	float arr[]={9.0,8.0,7.0,6.0,5.0,4.0};
	int sz=sizeof(arr)/sizeof(arr[0]);
	qsort(arr,sz,sizeof(arr[0]),cmp_float);
		int i=0;
	for(i=0;i<sz;i++)
	{
		printf("%f ",arr[i]);
	}
	return 0;
} 

//使用库函数qsort进行字符排序
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
int cmp_char(const void* e1,const void* e2)
{
	
	return *(char*)e1-*(char*)e2;//字符-字符返回的也是整数，所以不用转换成int
}
int main()
{
	char arr[]={'f','e','d','c','b','a'};
	int sz=sizeof(arr)/sizeof(arr[0]);
	qsort(arr,sz,sizeof(arr[0]),cmp_char);
	int i=0;
	for(i=0;i<sz;i++)
	{
		printf("%c ",arr[i]);
	}
	return 0;
} 

//使用库函数qsort进行结构体中的字符串排序
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
struct stu{
	char name[20];
	int age;
};
int cmp_char(const void* e1,const void* e2)
{
	
	return strcmp(((struct stu*)e1)->name,((struct stu*)e2)->name);//字符串之间的比较要使用strcmp
}
int main()
{
	struct stu s[2]={{"zhang san",20},{"li si",18}};
	int sz=sizeof(s)/sizeof(s[0]);
	qsort(s,sz,sizeof(s[0]),cmp_char);
	int i=0;
	for(i=0;i<sz;i++)
	{
		printf("%s ",s[i].name);
	}
	return 0;
} 

//模拟实现库函数qsort功能
#include<stdio.h>
#include<stdlib.h>
//整型冒泡排序
void swap(char* buf1, char* buf2, int width)
{
	int i = 0;
	for (i = 0; i < width; i++)
	{
		char temp = *buf1;
		*buf1 = *buf2;
		*buf2 = temp;
		buf1++;
		buf2++;
	}
}


//进行排序
int cmp_int(const void* e1, const void* e2)
{
	return  *(int*)e1 - *(int*)e2; //默认都是升序排列，倒叙可以交换减数和被减数
}

void bubble_sort(void* base, int sz, int width, int(*cmp)(void* e1, void* e2))
{
	int i = 0;
	int j = 0;
	for (i = 0; i < sz - 1; i++)
	{
		for (j = 0; j < sz - 1 - i; j++)
		{
			if (cmp((char*)base + j * width, (char*)base + (j + 1) * width) > 0)
			{
				swap((char*)base + j * width, (char*)base + (j + 1) * width, width);
			}
		}
	}
}


int main()
{
int arr[] = { 1,3,5,7,9,2,4,6,8,10 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	bubble_sort(arr, sz, sizeof(arr[0]), cmp_int);
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%d ", i);
	}

	return 0;
}
