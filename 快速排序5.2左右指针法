#include<stdio.h>

//三数取中
int GetMidIndex(int* arr, int left, int right)
{
	int mid = (left + right) >> 1;
	if (arr[left] < arr[mid])
	{
		if (arr[mid] < arr[right])
		{
			return mid;
		}
		else if (arr[right] < arr[left])
		{
			return left;
		}
		else
			return right;
	}
	else
	{
		if (arr[right] < arr[mid])
		{
			return mid;
		}
		else if (arr[left] < arr[right])
		{
			return left;
		}
		else
			return right;
	}

}


void Swap(int* p1, int* p2)
{
	int tmp = *p1;
	*p1 = *p2;
	*p2 = tmp;
}


int PartSort(int* arr, int left, int right)
{
	int index = GetMidIndex(arr, left, right);
	Swap(&arr[left], &arr[index]);
	int begin = left;
	int end = right;
	int key = begin;
	while (begin < end)
	{
		//右边找小
		while ((begin < end) && (arr[end] >= arr[key]))
		{
			end--;
		}
		//左边找大
		while ((begin < end) && (arr[begin] <= arr[key]))
		{
			begin++;
		}
		//交换begin和end
		Swap(&arr[begin], &arr[end]);
	}
	//交换begin==end时所指数据和key交换
	Swap(&arr[begin], &arr[key]);
	return begin;

}

//快速排序

void QuickSort(int* arr, int left, int right)
{
	if (left >= right)
		return;
	int keyIndex = PartSort(arr, left, right);
	//分治算法  继续对左右区间分别进行排序
	QuickSort(arr, left, keyIndex-1);
	QuickSort(arr, keyIndex + 1, right);
}


int main()
{
	int arr[] = { 9,8,7,6,5,4,3,2,1,0 };
	int sz = sizeof(arr) / sizeof(int);
	QuickSort(arr, 0, sz - 1);
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%d ", arr[i]);
	}
	return 0;
}
