//1.模拟实现strcat
//#include<stdio.h>
//char my_strcat(char* dest, const char* src)
//{
//	char*ret = dest;
//	while (*dest != '\0')
//	{
//		dest++;
//	}
//	while (*src != '\0')
//	{
//		*dest = *src;
//		dest++;
//		src++;
//	}
//	return ret;
//}
//int main()
//{
//	char arr1[20] = "hello";
//	char arr2[] = "world";
//	my_strcat(arr1, arr2);
//	printf("%s\n", arr1);
//	return 0;
//}

//2.模拟实现strcmp
//#include<stdio.h>
//#include<assert.h>
//int my_strcmp(const char* str1, const char* str2)
//{
//	assert(str1 && str2);
//	while (*str1 == *str2)
//	{
//		if (*str1 == '\0')
//		{
//			return 0;//相等
//		}
//		str1++;
//		str2++;
//	}
//    if(*str1>*str2)
//	return 1;
//	else
//	return -1;
//}
//int main()
//{
//	char arr1[] = "abcdef";
//	char arr2[] = "abcdefe";
//	int ret=my_strcmp(arr1, arr2);
//	printf("%d\n", ret);
//	return 0;
//}

//3.模拟实现strncpy
//#include<stdio.h>
//#include<assert.h>
//char* my_strncpy(char* dest, char* src,int n)
//{
//	assert(dest && src);
//	char* ret = dest;
//	while (n && (*dest++ = *src++))
//	{
//		n--;
//	}
//	if (n > 0)
//	{
//		while (--n)
//		{
//			*dest++ = '\0';
//		}
//	}
//	return ret;
//}
//int main()
//{
//	char arr1[20] = "hello";
//	char arr2[] = "word";
//	my_strncpy(arr1, arr2, 10);
//	printf("%s\n", arr1);
//	return 0;
//}

//4.模拟实现strstr

//#include<stdio.h>
//#include<assert.h>
//char* my_strstr(const char* dest, const char* src)
//{
//	assert(dest && src);
//	char* s1 = dest;
//	char* s2 = src;
//	char* start = dest;
//	if (src == '\0')
//	{
//		return dest;
//	}
//	while (*start)
//	{
//		s1 = start;
//		s2 = src;
//		while ((*s1 != '\0') && (*s2 != '\0') && (*s1 == *s2))
//		{
//			s1++;
//			s2++;
//		}
//		if (*s2 == '\0')
//			return start;//找到子串
//		start++;//循环找子串
//	}
//	return NULL;
//}
//int main()
//{
//	char arr1[] = "abcccdef";
//	char arr2[] = "ccd";
//	char* ret = my_strstr(arr1, arr2);
//	if (ret == NULL)
//	{
//		printf("不是子串\n");
//	}
//	printf("是子串\n");
//	return 0;
//}

//5.模拟实现memcpy
//#include<stdio.h>
//#include<assert.h>
//void* my_memcpy(void* dest, const void* src, size_t num)
//{
//	assert(dest && src);
//	void* ret = dest;
//	while (num--)
//	{
//		*(char*)dest = *(char*)src;
//		++(char*)dest;
//		++(char*)src;
//	}
//	return ret;
//}
//int main()
//{
//	int arr1[] = { 1,2,3,4,5 };
//	int arr2[5] = { 0 };
//	my_memcpy(arr2, arr1, sizeof(arr1));
//	int i = 0;
//	for (i = 0; i < 5; i++)
//	{
//		printf("%d ", arr2[i]);
//	}
//	return 0;
//}

//6.模拟实现memmove
#include<stdio.h>
#include<assert.h>
void* my_memmove(void* dest, const void* src, size_t num)
{
	assert(dest && src);
	void* ret = dest;
	if (dest < src)
	{
		//从前向后拷贝
		while (num--)
		{
			*(char*)dest = *(char*)src;
			++(char*)dest;
			++(char*)src;
		}
	}
	else
	{
		//从后向前拷贝
		while (num--)
		{
			*((char*)dest + num )= *((char*)src + num);
		}
	}
	return ret;
}
int main()
{
	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
	my_memmove(arr, arr + 2, 20);
	return 0;
}
