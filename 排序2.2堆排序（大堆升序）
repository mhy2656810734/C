#include<stdio.h>

//交换函数
void Swap(int* p1, int* p2)
{
	int tmp = *p1;
	*p1 = *p2;
	*p2 = tmp;
}
//调整大堆函数
void AdjustUp(int* arr, int sz, int root)
{
	int parent = root;//根节点
	int child = parent * 2 + 1;//默认为左孩子
	while (child < sz)//不能大于下标
	{
		if ((child + 1 < sz) && (arr[child + 1] > arr[child]))
		{
			//child+1<sz   避免没有右孩子访问出错
			child += 1;//如果右孩子的值，就将child下标调整为右孩子下标
		}
		if (arr[child] > arr[parent])
		{
			//如果孩子节点的值大于双亲节点就交换
			Swap(&arr[child], &arr[parent]);
			parent = child;//将孩子节点的下标给父节点，继续调整下一个子树
			child = parent * 2 + 1;//左孩子
		}
		else
		{
			break;//已经调整好就不需要调整了
		}
	}
}

//堆排序函数
void HeapSort(int* arr, int sz)
{
	int i = 0;
	//建堆
	for (i = (sz - 1 - 1) / 2; i >= 0; i--)//从倒数第一个非叶子结点的子树开始调整成大堆
	{                                       //i--就是让坐标每次减一，倒着向根调整
		AdjustUp(arr, sz, i);
	}
	int end = sz - 1;//最后一个元素的下标
	while (end > 0)//留下第一个元素
	{
		Swap(&arr[0], &arr[end]);//将第一个最大的元素和最后一个元素交换
		AdjustUp(arr, end, 0);//从根节点开始调整
		end--;//将最后一个元素不当做节点
	}
}

int main()
{
	int arr[] = { 4,2,0,5,9,7,3,1,6,8 };
	int sz = sizeof(arr) / sizeof(int);
	HeapSort(arr, sz);
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%d ", arr[i]);
	}
	return 0;
}
