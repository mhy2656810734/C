//头文件
//函数声明
#define DEFAULT_SZ 3
#define MAX_NAME 20
#define MAX_SEX 5
#define MAX_TELE 12
#define MAX_ADDR 20
#include<stdio.h>
#include<string.h>
#include<stdlib.h>

enum Option
{
	EXIT,
	ADD,
	DEL,
	SERACH,
	MODIFY,
	SHOW
};
//个人信息
typedef struct PeoInfo
{
	char name[MAX_NAME];
	int age;
	char sex[MAX_SEX];
	char tele[MAX_TELE];
	char addr[MAX_ADDR];
}PeoInfo;
//通讯录
typedef struct Contact
{
	struct PeoInfo* data;//联系人
	int size;//当前存放的联系人的数量
	int capacity;//最大容量
}Contact;

//各种功能的实现
//初始化通讯录
void InitContact( Contact* ps);
//添加联系人
void AddContact( Contact* ps);
//显示联系人信息
void ShowContact(const Contact* ps);
//删除联系人
void DelContact(Contact* ps);
//查找联系人
void SearchContact(const Contact* ps);
//修改信息
void ModifyContact( Contact* ps);
void DestoryContact(Contact* ps);

//源文件
//通讯录功能实现
#include"contact.h"
//初始化通讯录
void InitContact( Contact* ps)
{
	ps->data = (PeoInfo*)malloc(DEFAULT_SZ * sizeof(PeoInfo));
	if (ps->data == NULL)
	{
		return;
	}
	ps->size = 0;
	ps->capacity = DEFAULT_SZ;
}

void check_Capacity(Contact* ps)
{
	//使用realloc进行动态开辟空间的扩容
	if (ps->size == ps->capacity)
	{
		//满了开始扩容
		PeoInfo* ptr=realloc(ps->data, (ps->capacity+ 2) * sizeof(PeoInfo));
		if (ptr != NULL)
		{
			ps->data = ptr;
			ps->capacity += 2;
			printf("增容成功\n");
		}
	}
}
//添加信息
void AddContact(Contact* ps)
{
	//1.先检查有没有满
	//满了，则什么也不做
	//不满就扩容，每次扩2
	check_Capacity(ps);
	printf("请输入姓名:");
	scanf("%s", ps->data[ps->size].name);
	printf("请输入年龄:");
	scanf("%d", &ps->data[ps->size].age);
	printf("请输入性别:");
	scanf("%s", ps->data[ps->size].sex);
	printf("请输入电话:");
	scanf("%s", ps->data[ps->size].tele);
	printf("请输入地址:");
	scanf("%s", ps->data[ps->size].addr);

	ps->size++;
	printf("添加成功\n");

}

//显示信息
void ShowContact(const struct Contact* ps)
{
	if (ps->size == 0)
	{
		printf("通讯录为空!\n");
	}
	else
	{
		int i = 0;//用来记录通讯录信息的个数
		//标题
		printf("%-20s\t %-4s\t %-5s\t %-12s\t %-20s\n", "姓名", "年龄", "性别", "电话", "地址");
		for (i = 0; i < ps->size; i++)
		{
			//数据
			printf("%-20s\t %-4d\t %-5s\t %-12s\t %-20s\n",
				ps->data[i].name,
				ps->data[i].age,
				ps->data[i].sex,
				ps->data[i].tele,
				ps->data[i].addr);
		}
	}
}

//查找功能
static int FindByName(const struct Contact* ps, char name[MAX_NAME])
{
	int i= 0;
	for (i = 0; i < ps->size; i++)
	{
		if (strcmp(ps->data[i].name, name) == 0)
		{
			return i;
		}
	}
	return -1;
}


//删除信息
void DelContact(struct Contact* ps)
{
	//1.查找姓名
	char name[MAX_NAME];
	printf("请输入想要删除的联系人的姓名:\n");
	scanf("%s", name);
	int pos = FindByName(ps, name);
	//2.删除
	if (pos == -1)
	{
		printf("该联系人不存在的！\n");
	}
	else
	{
		//删除数据
		int j = 0;
		for (j = pos; j < ps->size; j++)
		{
			ps->data[j] = ps->data[j + 1];
		}
		ps->size--;
		printf("删除成功！\n");
	}
}

//查找功能
void SearchContact(const struct Contact* ps)
{
	char name[MAX_NAME];
	printf("请输入要查找人的姓名:\n");
	int pos=FindByName(ps, name);
	if(pos == -1)
	{
		printf("该联系人不存在的！\n");
	}
	else
	{
		//打印该联系人的信息
		printf("%-20s\t %-4s\t %-5s\t %-12s\t %-20s\n", "姓名", "年龄", "性别", "电话", "地址");
			printf("%-20s\t %-4d\t %-5s\t %-12s\t %-20s\n",
				ps->data[pos].name,
				ps->data[pos].age,
				ps->data[pos].sex,
				ps->data[pos].tele,
				ps->data[pos].addr);
	}
}

//修改信息
void ModifyContact(struct Contact* ps)
{
	char name[MAX_NAME];
	printf("请输入要修改联系人的姓名:\n");
	scanf("%s", name);
	int pos = FindByName(ps, name);
	if (pos == -1)
	{
		printf("该联系人不存在的！\n");
	}
	else
	{
		//重新添加信息
		printf("请输入姓名:");
		scanf("%s", ps->data[pos].name);
		printf("请输入年龄:");
		scanf("%d", &ps->data[pos].age);
		printf("请输入性别:");
		scanf("%s", ps->data[pos].sex);
		printf("请输入电话:");
		scanf("%s", ps->data[pos].tele);
		printf("请输入地址:");
		scanf("%s", ps->data[pos].addr);
		
		printf("修改成功!\n");
	}
}

void DestoryContact(Contact* ps)
{
	free(ps->data);
	ps->data = NULL;
}

//功能测试
#include"contact.h"
void menu()
{
	printf("******************************\n");
	printf("*****         通讯录    ***** \n");
	printf("** 1.添加信息    2.删除信息 **\n");
	printf("** 3.查找信息    4.修改信息 **\n");
	printf("** 5.显示信息    0.退出程序 **\n");
	printf("******************************\n");
}
int main()
{
	int input=0;
	struct Contact con;//通讯仓，里面包含data和size以及capacity 
	InitContact(&con);//初始化通讯录
	do
	{
		menu();
		printf("请输入数字进行选择:\n");
		scanf("%d", &input);
		switch (input)
		{
		case ADD:
			AddContact(&con);
			break;
		case DEL:
			DelContact(&con);
			break;
		case SERACH:
			SearchContact(&con);
			break;
		case MODIFY:
			ModifyContact(&con);
			break;
		case SHOW:
			ShowContact(&con);
			break;
		case EXIT:
			//销毁通讯录   释放空间
			DestoryContact(&con);
			printf("退出通讯录!\n");
			break;
		default:
			printf("输入错误，请重新输入!\n");
			break;
		}
	} while (input);
	return 0;
}
