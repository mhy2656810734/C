////暴力求解法
//#include<stdio.h>
//#include<string.h>
//#include<assert.h>
//void reverse(char* left, char* right)
//{
//	assert(left != NULL);
//	assert(right != NULL);
//	while (left < right)
//	{
//		char tmp = *left;
//		*left = *right;
//		*right = tmp;
//		left++;
//		right--;
//	}
//}
//void left_move(char arr[], int k)
//{
//	assert(arr);
//	int len = strlen(arr);
//	assert(k < len);
//	reverse(arr, arr + k - 1);//左旋左半部分
//	reverse(arr + k, arr + len - 1);//左旋右半部分
//	reverse(arr, arr + len - 1);//整体左旋
//}
//int main()
//{
//	char arr[] = "abcdef";
//	left_move(arr, 2);
//	printf("%s\n", arr);
//	return 0;
//}




/*暴力求解法:主要思想是通过对arr1字符串全部旋转，然后将每次旋转一个字符后的字符串
与arr2进行比较*/

//#include<stdio.h>
//#include<string.h>
//#include<assert.h>
//void reverse(char* left, char* right)
//{
//	assert(left != NULL);
//	assert(right != NULL);
//	while (left < right)
//	{
//		char tmp = *left;
//		*left = *right;
//		*right = tmp;
//		left++;
//		right--;
//	}
//}
////k值接受的是1，所以一下代码可以优化
//void left_move(char arr[], int k)
//{
//	assert(arr);
//	int len = strlen(arr);
//	assert(k < len);
//	reverse(arr, arr + k - 1);//左旋左半部分
//	reverse(arr + k, arr + len - 1);//左旋右半部分
//	reverse(arr, arr + len - 1);//整体左旋
//	//上述三步是三步翻转法，鹏哥命名的，感觉这种好理解
//}
////判断函数
//int is_left_move(char arr1[], char arr2[])
//{
//	assert(arr1);
//	assert(arr2);
//	int i = 0;
//	int len = strlen(arr1);
//	if (len != strlen(arr2))
//		return 0;
//	for (i = 0; i < len; i++)
//	{
//		left_move(arr1, 1);//每一次循环arr1字符串都会发生改变，所以每次让旋转一个字符串
//		if (strcmp(arr1, arr2) == 0)
//			return 1;
//	}
//	return 0;
//}
//int main()
//{
//	char arr1[] = "abcdef";
//	char arr2[] = "cdefab";
//	int ret=is_left_move(arr1, arr2);
//	if (ret == 1)
//	{
//		printf("YES!\n");
//	}
//	else
//		printf("NO！\n");
//	return 0;
//}
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<assert.h>
int is_left_move(char arr1[], char arr2[])
{
	assert(arr1);
	assert(arr2);
	int len = strlen(arr1);
	if (len != strlen(arr2))
		return 0;
	strncat(arr1, arr1, len);//此时字符串arr1是abcdefabcdef
	if (strstr(arr1, arr2) == NULL)//判断arr2是否是arr1的子串
		return 0;
	else
		return 1;
}
int main()
{
	char arr1[30] = "abcdef";
	char arr2[] = "cdefab";
	int ret = is_left_move(arr1,arr2);
	if (ret == 1)
	{
		printf("YES\n");
	}
	else
		printf("NO\n");
	return 0;
}
