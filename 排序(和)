#include<stdio.h>
#include<stdlib.h>
//1.直接插入排序
//void InsertSort(int* arr, int sz)
//{
//	int i = 0;
//	for (i = 0; i < sz-1; i++)
//	{
//		int end = i;
//		int tmp = arr[end+1];
//		while (end >= 0)
//		{
//			if (arr[end]>tmp)
//			{
//				arr[end + 1] = arr[end];
//				end--;
//			}
//			else
//			{
//				break;
//			}
//		}
//		arr[end + 1] = tmp;
//	}
//}
//int main()
//{
//	int arr[] = { 9,8,7,6,5,4,3,2,1,0 };
//	int sz = sizeof(arr) / sizeof(int);
//	InsertSort(arr, sz);
//	int i = 0;
//	for (i = 0; i < sz; i++)
//	{
//		printf("%d ", arr[i]);
//	}
//	return 0;
//}



//2.选择排序
//void Swap(int* p1, int* p2)
//{
//	int tmp = *p1;
//	*p1 = *p2;
//	*p2 = tmp;
//}
//void SelectSort(int* arr, int sz)
//{
//	int begin = 0;
//	int end=sz-1;
//	while (begin < end)
//	{
//		int i = 0;
//		int mini = begin;//最大数据下标
//		int maxi = end;//最小数据下标
//		for (i = begin; i <= end; i++)
//		{
//			if (arr[i] >arr[maxi] )
//				maxi = i;
//			if (arr[i] < arr[mini])
//				mini = i;
//		}
//		//找到最大值和最小值，与begin和end交换值
//		Swap(&arr[mini], &arr[begin]);
//		if (maxi == begin)//如果重叠，需要修改位置
//		{
//			maxi = mini;
//		}
//		Swap(&arr[maxi], &arr[end]);
//		end--;
//		begin++;
//	}
//}
//int main()
//{
//	int arr[] = { 9,8,7,6,5,4,3,2,1,0 };
//	int sz = sizeof(arr) / sizeof(int);
//	SelectSort(arr, sz);
//	int i = 0;
//	for (i = 0; i < sz; i++)
//	{
//		printf("%d ", arr[i]);
//	}
//	return 0;
//}


//3.希尔排序
//void ShellSort(int* arr, int sz)
//{
//	int gap = sz;
//	while (gap > 1)//等于1就已经有序
//	{
//		gap /= 2;
//		int i = 0;
//		for (i = 0; i < sz-gap; i+=gap)//间隔为gap的同时排
//		{
//			int end = i;
//			int tmp = arr[end + gap];
//			while (end >= 0)
//			{
//				if (arr[end] > tmp)
//				{
//					arr[end + gap] = arr[end];
//					end -= gap;
//				}
//				else
//				{
//					break;
//				}
//			}
//			arr[end + gap] = tmp;
//		}
//		
//	}
//}
//int main()
//{
//	int arr[] = { 9,8,7,6,5,4,3,2,1,0 };
//	int sz = sizeof(arr) / sizeof(int);
//	ShellSort(arr, sz);
//	int i = 0;
//	for (i = 0; i < sz; i++)
//	{
//		printf("%d ", arr[i]);
//	}
//	return 0;
//}


void Swap(int* p1, int* p2)
{
	int tmp = *p1;
	*p1 = *p2;
	*p2 = tmp;
}

//大堆升序
//调成大堆函数
//void AdjustUp(int* arr, int sz, int root)
//{
//	int parent = root;//根节点
//	int child = parent * 2 + 1;//默认是左孩子
//	while (child < sz)
//	{
//		if ((child+1<sz)&&(arr[child + 1] > arr[child]))
//		{
//			child += 1;//如果右孩子比左左孩子大就让下标指向右孩子
//		}
//		if ((arr[child] > arr[parent]))
//		{
//			Swap(&arr[child], &arr[parent]);
//			parent = child;//将此时孩子的下标给父母，继续进行循环
//			child = parent * 2 + 1;
//		}
//		else
//		{
//			break;//已经调整好了就结束循环
//		}
//	}
//
//}
//void HeapSort(int* arr,int sz)
//{
//	int i = 0;
//	for (i = (sz - 1 - 1) / 2; i >= 0; i--)//从倒数第一个非叶子结点开始调整成大堆
//	{
//		AdjustUp(arr, sz, i);
//	}
//	int end = sz - 1;//最后一个数据的下标
//	while (end > 0)//第一个已经排好，是最大值
//	{
//		Swap(&arr[end], &arr[0]);
//		AdjustUp(arr, end,0);
//		end--;//将最后一个元素不当作结点，已经是最大值
//	}
//}



//小堆降序
//void Adjust(int* arr, int sz, int root)
//{
//	int parent = root;
//	int child = parent * 2 + 1;//默认是左孩子
//	while (child < sz)
//	{
//		if ((child + 1 < sz) && (arr[child + 1] < arr[child]))
//		{
//			child += 1;
//		}
//		if ((arr[child] < arr[parent]))
//		{
//			Swap(&arr[parent], &arr[child]);
//			parent = child;
//			child = parent * 2 + 1;
//		}
//		else
//		{
//			break;
//		}
//	}
//}
//
//
//void HeapSort(int* arr, int sz)
//{
//	int i = 0;
//	for (i = (sz-1-1)/2; i >=0; i--)
//	{
//		Adjust(arr, sz, i);
//	}
//	int end = sz - 1;
//	while (end > 0)
//	{
//		Swap(&arr[end], &arr[0]);
//		Adjust(arr, end, 0);
//		end--;
//	}
//}


//冒泡排序
//void BubbleSort(int* arr, int sz)
//{
//	int end = sz - 1;
//	int flag = 0;
//	while (end > 0)
//	{
//		int i = 0;
//		for (i = 1; i <= end; i++)
//		{
//			if (arr[i - 1] > arr[i])
//			{
//				Swap(&arr[i - 1], &arr[i]);
//				flag = 1;
//			}
//		}
//		if (flag == 0)
//		{
//			break;
//		}
//		end--;
//	}
//}

//void BubbleSort(int* arr, int sz)
//{
//	int i = 0;
//	int flag = 1;
//	for (i = 0; i < sz - 1; i++)
//	{
//		int j = 0;
//		for (j = 0; j < sz -1- i; j++)
//		{
//			if (arr[j + 1] < arr[j])
//			{
//				Swap(&arr[j], &arr[j + 1]);
//				flag = 0;
//			}
//		}
//		if (flag == 1)
//		{
//			break;
//		}
//	}
//}

////快速排序1.挖坑法
//int GetMidIndex(int* arr, int left, int right)
//{
//	int mid = (left + right) / 2;
//	if (arr[left]<arr[mid])
//	{
//		if (arr[mid] < arr[right])
//		{
//			return mid;
//		}
//		else if (arr[left] > arr[right])
//		{
//			return left;
//		}
//		else
//			return right;
//	}
//	else
//	{
//		if (arr[mid] > arr[right])
//		{
//			return mid;
//		}
//		else if (arr[left] < arr[right])
//		{
//			return left;
//		}
//		else
//			return right;
//	}
//}
int QuickPSort(int* arr,int left, int right)
{
	if (left >= right)
		return;
	//int index = GetMidIndex(arr, left, right);
	//Swap(&arr[left], &arr[index]);
	int begin = left;
	int end = right;
	int key = arr[begin];
	int pivot = begin;
	while (begin < end)
	{
		//右边找小
		while ((begin<end)&&(arr[end] >= key))
		{
			end--;
		}
		arr[pivot] = arr[end];
		pivot = end;
		//左边找大
		while ((begin < end) && (arr[begin] <= key))
		{
			begin++;
		}
		arr[pivot] = arr[begin];
		pivot = begin;
	}
	pivot = begin;
	arr[pivot] = key;
	return pivot;
}


//左右指针法
//int GetMidIndex(int* arr, int left, int right)
//{
//	int mid = (left + right) / 2;
//	if (arr[left] < arr[mid])
//	{
//		if (arr[mid] < arr[right])
//			return mid;
//		else if (arr[left] > arr[right])
//			return left;
//		else
//			return right;
//	}
//	else
//	{
//		if (arr[mid] > arr[right])
//			return mid;
//		else if (arr[left] < arr[right])
//			return left;
//		else
//			return right;
//	}


//void QuickSort(int* arr, int left, int right)
//{
//	if (left >= right)
//		return;
//	int index = GetMidIndex(arr,left, right);
//	Swap(&arr[index], &arr[left]);
//	int begin = left;
//	int end = right;
//	int key = arr[begin];
//	index = begin;
//	while (begin < end)
//	{
//		//右边找小
//		while ((begin < end) && arr[end] >= key)
//		{
//			end--;
//		}
//		//左边找大
//		while ((begin < end) && arr[begin] <= key)
//		{
//			begin++;
//		}
//		Swap(&arr[end], &arr[begin]);
//	}
//	Swap(&arr[begin], &arr[index]);
//	index = begin;
//	QuickSort(arr, left, index - 1);
//	QuickSort(arr, index + 1, right);
//}

//前后指针法
//int PartSort(int* arr, int left, int right)
//{
//	int index = GetMidIndex(arr, left, right);
//	Swap(&arr[left], &arr[index]);
//	int cur = left + 1;
//	int prev = left;
//	int key = left;
//		while (cur <= right)
//		{
//			if((arr[cur] < arr[key]) && (prev++ != cur))
//			{
//				Swap(&arr[cur], &arr[prev]);
//			}
//			cur++;
//		}
//		Swap(&arr[key], &arr[prev]);
//		return prev;
//}
//
//
//void QuickSort(int* arr, int left, int right)
//{
//	if (left >= right)
//		return;
//	int keyIndex = PartSort(arr, left, right);
//	QuickSort(arr, left, keyIndex - 1);
//	QuickSort(arr, keyIndex + 1, right);
//}
//void QuickSort(int* arr, int sz)
//{
//	ST st;
//	StackInit(&st);
//	StackPush(&st, sz - 1);
//	StackPush(&st, 0);
//	while (!StackEmpty(&st))
//	{
//		int left = StackTop(&st);
//		StackPop(&st);
//		int right = StackTop(&st);
//		StackPop(&st);
//		int keyindex = QuickPSort(arr, left, right);
//		//分区间
//		if (keyindex + 1 < right)
//		{
//			StackPush(&st, right);
//			StackPush(&st, keyindex+1);
//		}
//		if (left < keyindex - 1)
//		{
//			StackPush(&st, keyindex-1);
//			StackPush(&st, left);
//		}
//	}
//	StackDistory(&st);
//}


////归并排序
//void _MergeSort(int* arr, int left, int right, int* tmp)
//{
//	if (left >= right)
//		return;
//	int mid = (left + right) >> 1;
//	_MergeSort(arr, left, mid, tmp);
//	_MergeSort(arr, mid + 1, right, tmp);
//	//归并
//	int begin1 = left;
//	int end1 = mid;
//	int begin2 = mid + 1;
//	int end2 = right;
//	int index = left;
//	while ((begin1 <= end1) && (begin2 <= end2))
//	{
//		if (arr[begin1] < arr[begin2])
//		{
//			tmp[index++] = arr[begin1++];
//		}
//		else
//		{
//			tmp[index++] = arr[begin2++];
//		}
//	}
//	while (begin1 <= end1)
//	{
//		tmp[index++] = arr[begin1++];
//	}
//	while (begin2 <= end2)
//	{
//		tmp[index++] = arr[begin2++];
//	}
//	int i = 0;
//	for (i = left; i <= right; i++)
//	{
//		arr[i] = tmp[i];
//	}
//}
//void MergeSort(int* arr, int sz)
//{
//	int* tmp = (int*)malloc(sizeof(int) * sz);
//	if (tmp == NULL)
//	{
//		perror("");
//		exit(-1);
//	}
//	else
//	{
//		_MergeSort(arr, 0, sz - 1, tmp);
//		free(tmp);
//		tmp = NULL;
//	}
//}


//非递归
//void MergeSortNonR(int* arr, int sz)
//{
//	int gap = 1;//每组数据的个数
//	int* tmp = (int*)malloc(sizeof(int) * sz);
//	while (gap < sz)
//	{
//		int i = 0;
//		for (i = 0; i < sz; i +=2* gap)
//		{
//			//每组分成两个区间[i,i+gap-1] [i+gap,i+2*gap-1]
//			int begin1 = i;
//			int end1 = i + gap - 1;
//			int begin2 = i + gap;
//			int end2 = i + 2 * gap - 1;
//			//如果右区间没有
//			if (begin2 >= sz)
//			{
//				break;
//			}
//			if (end2 >= sz)
//			{
//				end2 = sz - 1;
//			}
//			//归并
//			int index = i;
//			while ((begin1 <= end1) && (begin2 <= end2))
//			{
//				if (arr[begin1] < arr[begin2])
//				{
//					tmp[index++] = arr[begin1++];
//				}
//				else
//				{
//					tmp[index++] = arr[begin2++];
//				}
//			}
//			while (begin1 <= end1)
//			{
//				tmp[index++] = arr[begin1++];
//			}
//			while (begin2 <= end2)
//			{
//				tmp[index++] = arr[begin2++];
//			}
//			int j = 0;
//			for (j = 0; j <= end2; j++)
//			{
//				arr[j] = tmp[j];
//			}
//		}
//		gap *= 2;
//	}
//	free(tmp);
//	tmp = NULL;
//}


//计数排序
void CountSort(int* arr, int sz)
{
	int max = arr[0];
	int min = arr[0];
	int i = 0;
	for (i = 1; i < sz; i++)
	{
		if (arr[i] > max)
		{
			max = arr[i];
		}
		if (arr[i] < min)
		{
			min = arr[i];
		}
	}
	int range = max - min + 1;
	int* tmp = (int*)malloc(sizeof(int) * range);
	if (tmp == NULL)
	{
		perror("");
		return;
	}
	else
	{
		memset(tmp, 0, sizeof(int) * range);
		//计算每个数出现的次数
		int i = 0;
		for (i = 0; i < sz; i++)
		{
			tmp[arr[i] - min]++;
		}
		int j = 0;
		for (i = 0; i < range; i++)
		{
			while (tmp[i]--)
			{
				arr[j++] = i + min;
			}
		}
	}
	free(tmp);
	tmp = NULL;
}
int main()
{
	int arr[] = { 9,8,7,4,5,6,3,2,1,0 };
	int sz = sizeof(arr) / sizeof(int);
    CountSort(arr,sz);
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%d ", arr[i]);
	}
	return 0;
}

