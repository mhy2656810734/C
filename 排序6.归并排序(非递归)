#include<stdio.h>
#include<stdlib.h>
void MergeSortNonR(int* arr, int sz)
{
	int* tmp = (int*)malloc(sizeof(int) * sz);
	int gap = 1;//每组数据的个数
	while (gap < sz)
	{
		int i = 0;
		for (i = 0; i < sz; i += 2 * gap)
		{
			//[i,i+gap-1]  [i+gap,i+2*agp-1]   每组分成两个区间
			int begin1 = i;
			int end1 = i + gap - 1;
			int begin2 = i + gap;
			int end2 = i + 2 * gap - 1;
			//归并过程中右半区间可能就不存在
			if (begin2 >= sz)
			{
				break;
			}
			//归并过程中右半区间算多了，必须修正
			if (end2 >= sz)
			{
				end2 = sz - 1;
			}
			int index = i;
			//归并
			while ((begin1 <= end1)&&(begin2 <= end2))
			{
				if (arr[begin1] < arr[begin2])
				{
					tmp[index++] = arr[begin1++];
				}
				else
				{
					tmp[index++] = arr[begin2++];
				}
			}
			//如果有一个区间还没结束
			while (begin1 <= end1)
			{
				tmp[index++] = arr[begin1++];
			}
			while (begin2 <= end2)
			{
				tmp[index++] = arr[begin2++];
			}
				//拷贝回去
			for (int j = 0; j <= end2; j++)
			{
				arr[j] = tmp[j];
			}
			}
	
		gap *= 2;//增加每组数据
	}
	free(tmp);
	tmp = NULL;
}
int main()
{
	int arr[] = { 8,7,5,1,0,2,6,9,4,3,10 };
	int sz = sizeof(arr) / sizeof(int);
	MergeSortNonR(arr, sz);
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%d ", arr[i]);
	}
	return 0;
}
