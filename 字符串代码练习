#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<assert.h>

char* my_strncpy(char* dest, const char* src, int n)
{
	char ret = dest;
	while ((n)&&(*dest++=*src++))
	{
		n--;
	}
	if (n > 0)
	{
		while (n--)
		{
			*dest++ = '\0';
		}
	}
	return ret;
}

int my_strcmp(const char* dest, const char* src)
{
	assert(dest && src);
	while (*dest == *src)
	{
		if (*src == '\0')
			return 0;
		src++;
		dest++;
	}
	if (*src > *dest)
		return -1;
	else
		return 1;
	return 0;

}

char* my_strcat(char* dest, const char* src)
{
	char ret = dest;
	while (*dest)
	{
		dest++;
	}
	while (*dest++ = *src++)
	{
		;
	}
	return ret;
}

void my_strcpy(char* dest, const char* src)
{
	assert(dest && src);
	char ret = dest;
	while (*dest++ = *src++)
	{
		;
	}
	
}
int my_strlen(char* str)
{
	//if (*str != '\0')
	//{
	//	return 1 + my_strlen(str+1);
	//}
	//return 0;
	/*int count = 0;
	while (*str)
	{
		count++;
		str++;
	}
	return count;*/
	char* start = str;
	char* end = str;
	while (*end)
	{
		end++;
	}
	return end - start;
}

char* my_strstr(const char* dest, const char* src)
{
	assert(dest && src);
	if (*src == '\0')
	{
		return dest;
	}
	char* s1 = dest;
	char* s2 = src;
	char* start = dest;
	while (*start)
	{
		s1 = start; // 每次让s1指向最开始的那个字符
		s2 = src;// 一直指向初始字符
		// 此时相等
		while ((*s1 != '\0') && (*s2 != '\0') && (*s1 == *s2))
		{
			s1++;
			s2++;
		}
		// 为空说明就是子串  
		if (*s2 == '\0')
		{
			return start;
		}
		start++;
	}
	return NULL;
}


void my_memcpy(int* dest, const int* src, int num)
{
	assert(dest && src);
	while (num--)
	{
		*(char*)dest = *(char*)src;
		((char*)dest)++;
		((char*)src)++;
	}
}

void* my_memmove(void* dest, const void* src, int num)
{
	assert(dest && src);
	void* ret = dest;
	if (dest < src)
	{
		// 从前向后拷贝
		while (num--)
		{
			*(char*)dest = *(char*)src;
			++(char*)dest;
			++(char*)src;
		}
	}
	else
	{
		// 从后向前拷贝
		while (num--)
		{
			*((char*)dest + num) = *((char*)src + num);
		}
	}
	
	return ret;
}

int main()
{
	/*int* p = (int*)calloc(10000000 ,sizeof(int));
	if (p == NULL)
	{
		perror("");
	}
	else
	{
		for (int i = 0; i < 10; i++)
		{
			*(p + i) = i;
		}
		for (int i = 0; i < 10; i++)
		{
			printf("%d ", *(p + i));
		}
		printf("\n");
		int* pf = (int*)realloc(p, 20000000 * sizeof(int));
		if (pf == NULL)
		{
			perror("");
			exit(-1);
		}
		else
		{
			for (int i = 10; i < 20; i++)
			{
				*(pf + i) = i;
			}
			for (int i = 0; i < 20; i++)
			{
				printf("%d ", *(p + i));
			}
		}
		free(pf);
		pf = NULL;
	}*/
	/*char str[20] = "ABCDBDDDF";
	int len =strlen(str);
	char str2[20] = "CDB";
	printf("%s",my_strstr(str, str2));*/
	
	/*strncat(str, str, 10);
	printf("%s", str);*/
	//my_strcpy(str2, str);
	/*my_strcat(str2, str);*/
	/*strncpy(str2, str, 5);
	printf("%s\n%d", str2,len);*/
	/*int ret = my_strcmp(str, str2);
	printf("%d ", ret);*/
	int arr1[] = { 1,2,3,4,5 };
	int arr2[5] = { 0 };
	//memcpy(arr1, arr1+1, 16);
	my_memmove(arr1+1, arr1, 16);
	for (int i = 0; i < 5; i++)
	{
		printf("%d ", arr1[i]);
	}
	return 0;
}
