//头文件
#pragma once
#include<stdio.h>
#include<stdbool.h>
#include<stdlib.h>
#include<assert.h>

//typedef 重新点类型名
typedef int STDatatype;
//栈类型
typedef struct Stack
{
	//数据  top标记栈顶  容量
	STDatatype* data;
	int top;
	int capacity;
}ST;

//初始化栈   销毁
void StackInit(ST* ps);
void StackDestory(ST* ps);

//入栈
void StackPush(ST* ps, STDatatype x);
//出栈
void StackPop(ST* ps);
//取栈顶元素
STDatatype* StackTop(ST* ps);
//计算栈的数据个数
int StackSize(ST* ps);
//判断栈是否为空
bool StackEmpty(ST* ps);


//源文件
#include"Stack.h"

//初始化栈 
void StackInit(ST* ps)
{
	assert(ps);
	ps->data = (STDatatype*)malloc(sizeof(STDatatype) * 4);//初始化开辟4个数据大小的动态内存空间
	ps->capacity = 4;
	ps->top = 0;

}

// 销毁栈
void StackDestory(ST* ps)
{
	assert(ps);
	free(ps->data);
	ps->data = NULL;
	ps->top = ps->capacity = 0;
	
}

//入栈
void StackPush(ST* ps, STDatatype x)
{
	assert(ps);
	//判断是否满容
	if (ps->capacity == ps->top)
	{
		//增容
		STDatatype* pf = (STDatatype*)realloc(ps->data, sizeof(STDatatype) * 2 * ps->capacity);
		if (pf == NULL)
		{
			perror("");
			return;
		}
		else
		{
			ps->data = pf;
			ps->capacity *= 2;
		}
	}
	ps->data[ps->top] = x;
	ps->top++;
	
}

//出栈
void StackPop(ST* ps)
{
	assert(ps);
	//栈空终止程序报错
	assert(ps->top > 0);
	ps->top--;
}

//取栈顶元素
STDatatype* StackTop(ST* ps)
{
	assert(ps);
	assert(ps->top > 0);
	//top初始化为0，则它指向的是栈顶元素的下一个位置
	return ps->data[ps->top-1];
}
//计算栈的数据个数
int StackSize(ST* ps)
{
	assert(ps);
	return ps->top;
}
//判断栈是否为空
bool StackEmpty(ST* ps)
{
	assert(ps);
	return ps->top == 0;
}

//源文件
#include"Stack.h"
//挖坑法
int PartSort(int* arr, int left, int right)
{
	int begin = left;
	int end = right;
	int pivot = begin;
	int key = arr[begin];
	while (begin < end)
	{
		//右边找小
		while ((begin < end) && (arr[end] >= key))
		{
			end--;
		}
		//此时有比key小的数,放入坑
		arr[pivot] = arr[end];
		pivot = end;//将end下标位置继续当做坑
		//左边找大
		while ((begin < end) && (arr[begin] <= key))
		{
			begin++;
		}
		arr[pivot] = arr[begin];
		pivot = begin;
	}
	//循环结束时坑位就是begin和end相等的下标处
	pivot = begin;
	arr[pivot] = key;//将关键字的值放入坑位
	return begin;
}


void QuickSortNonR(int* arr, int sz)
{
	ST st;
	StackInit(&st);
	StackPush(&st, sz - 1);
	StackPush(&st, 0);
	while (!StackEmpty(&st))
	{
		int left = StackTop(&st);
		StackPop(&st);

		int right = StackTop(&st);
		StackPop(&st);

		int keyIndex = PartSort(arr, left, right);
		//进行分区间 [left,keyindex-1] 和  [keyindex+1,right]
		if (keyIndex + 1 < right)
		{
			StackPush(&st, right);
			StackPush(&st, keyIndex + 1);
		}
		if (left < keyIndex)
		{
			StackPush(&st, keyIndex - 1);
			StackPush(&st, left);
		}
	}
	StackDestory(&st);
}


int main()
{
	int arr[] = { 8,6,1,4,2,3,0,7,9,5 };
	int sz = sizeof(arr) / sizeof(int);
	QuickSortNonR(arr, sz);
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%d ", arr[i]);
	}
	return 0;
}
