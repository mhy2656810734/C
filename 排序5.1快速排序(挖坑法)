#include<stdio.h>

//三数取中
int GetMidIndex(int* arr, int left, int right)
{
	int mid = (left + right) >> 1;
	if (arr[left] < arr[mid])
	{
		if (arr[mid] < arr[right])
		{
			return mid;
		}
		else if (arr[right] < arr[left])
		{
			return left;
		}
		else
			return right;
	}
	else
	{
		if (arr[right] < arr[mid])
		{
			return mid;
		}
		else if (arr[left] < arr[right])
		{
			return left;
		}
		else
			return right;
	}

}

void Swap(int* p1, int* p2)
{
	int tmp = *p1;
	*p1 = *p2;
	*p2 = tmp;
}

void QuickSort(int* arr, int left, int right)
{
	//如果没有区间（只有一个数据）就结束
	if (left >= right)
		return;
	int index = GetMidIndex(arr, left, right);
	Swap(&arr[left], &arr[index]);
	int begin = left;
	int end = right;
	int key = arr[begin];//关键字
	int pivot = begin;//坑
	while (begin < end)
	{
		//右边找比关键字小的，放在坑位置
		while ((begin < end) && (arr[end] >= key))
		{
			end--;
		}
		arr[pivot] = arr[end];//将比关键字小的数据放入坑
		pivot = end;//将此时end的位置当做坑
		//左边找比关键字大的放在坑位置
		while ((begin < end) && (arr[begin] <= key))
		{
			begin++;
		}
		arr[pivot] = arr[begin];//将比关键字大的放在坑位置
		pivot = begin;//将此时的begin的位置当做坑
	}
	//循环结束后，此时begin和end相等，所指的位置就是坑
	pivot = begin;
	arr[pivot] = key;
	//然后再将关键字左边和右边的分别排序，整体就有序了
	QuickSort(arr, left, pivot - 1);
	QuickSort(arr, pivot + 1, right);
}


int main()
{
	int arr[] = { 9,8,7,6,5,4,3,2,1,0 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	QuickSort(arr, 0, sz - 1);
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%d ", arr[i]);
	}
	return 0;
}
