//头文件
#include<stdio.h>
#include<assert.h>
#include<stdlib.h>
#pragma once
typedef int SQDataType;
typedef struct SeqList
{
	SQDataType* a;
	int size;//有效数据的个数
	int capacity;//顺序表的容量
}SL;

//顺序表的初始化 打印 销毁
void SeqListInit(SL* ps);
void SeqListPrint(SL* ps);
void DistroySeqList(SL* ps);

//顺序表的增删改查等功能
//尾插  头插  尾删  头删 随机插入 随即删除  查找  删除
void SeqListPushBack(SL* ps,SQDataType x);
void SeqListPushFront(SL* ps, SQDataType x);
void SeqListPopBack(SL* ps);
void SeqListPopFront(SL* ps);
void SeqListInsert(SL* ps,int pos, SQDataType x);
void SeqListErase(SL* ps,int pos);
int  SeqListSearch(SL* ps, SQDataType x);
void SeqListModify(SL* ps, int pos, SQDataType x);

//源文件
#include"SeqList.h"
//初始化顺序表
void SeqListInit(SL* ps)
{
	ps->a = NULL;
	ps->size = 0;
	ps->capacity = 0;
}

//打印顺序表
void SeqListPrint(SL* ps)
{
	int i = 0;
	for (i = 0; i < ps->size; i++)
	{
		printf("%d ", ps->a[i]);
	}
	printf("\n");
}
//销毁顺序表
void DistroySeqList(SL* ps)
{
	free(ps->a);
	ps->a = NULL;
}

void Check_Capacity(SL* ps)
{
	if (ps->size == ps->capacity)
	{
		int newcapacity = ps->capacity == 0 ? 4 : ps->capacity * 2;
		SQDataType* pf = (SQDataType*)realloc(ps->a,sizeof(SQDataType) * newcapacity);
		if (pf == NULL)
		{
			perror("");
			return;
		}
		else
		{
			ps->a = pf;
		}
		ps->capacity = newcapacity;
	}
	
}
//尾插法
void SeqListPushBack(SL* ps, SQDataType x)
{
	Check_Capacity(ps);
	ps->a[ps->size] = x;
	ps->size++;
}

//头插法
void SeqListPushFront(SL* ps, SQDataType x)
{
	Check_Capacity(ps);
	int end = ps->size - 1;
	while (end>=0)
	{
		ps->a[end + 1] = ps->a[end];
		end--;
	}
	ps->a[0] = x;
	ps->size++;
}

//尾删
void SeqListPopBack(SL* ps)
{
	assert(ps->size > 0);
	ps->size--;
}

//头删
void SeqListPopFront(SL* ps)
{
	assert(ps->size > 0);
	int start = 0;
	while (start <ps->size)
	{
		ps->a[start] = ps->a[start + 1];
		start++;
	}
	ps->size--;
}

//随机插入
void SeqListInsert(SL* ps, int pos, SQDataType x)
{
	Check_Capacity(ps);
	assert(pos < ps->size);
	int end = ps->size - 1;
	while (end >= pos)
	{
		ps->a[end + 1] = ps->a[end];
		end--;
	}
	ps->a[pos] = x;
	ps->size++;
}

//随机删除
void SeqListErase(SL* ps, int pos)
{
	assert(pos < ps->size);
	while (pos<ps->size)
	{
		ps->a[pos] = ps->a[pos + 1];
		pos++;
	}
	ps->size--;
}

//查找
int  SeqListSearch(SL* ps, SQDataType x)
{
	int i = 0;
	for (i = 0; i<ps->size; i++)
	{
		if (ps->a[i] == x)
		{
			return i;
		}
	}
	return -1;
}

//删除
void SeqListModify(SL* ps,int pos, SQDataType x)
{
	assert(pos<ps->size);
	ps->a[pos] = x;
}

//源文件
#include"SeqList.h"
void menu()
{
	printf("*************************************\n");
	printf("**1.尾插数据             2.头插数据 \n");
	printf("**3.删除尾数据           4.删除首数据\n");
	printf("**5.随机插入数据         6.随机删除数据\n");
	printf("**7.查找数据             8.修改数据**\n");
	printf("**9.打印数据             0.退出程序\n");
	printf("*************************************\n");
	printf("请输入你的选择:>\n");
}
int main()
{
	SL s;
	int x = 0;
	int input = 0;
	int pos = 0;
	SeqListInit(&s);
	do
	{
		menu();
		scanf("%d", &input);
		switch (input)
		{
		case 1:
			printf("请输入你要插入的数据，以-1结束\n");
			do
			{
				scanf("%d", &x);
				if (x != -1)
				{
					SeqListPushBack(&s, x);
				}
			} while (x != -1);
			break;
		case 2:
			printf("请输入你要插入的数据，以-1结束\n");
			do
			{
				scanf("%d", &x);
				if (x != -1)
				{
					SeqListPushFront(&s, x);
				}
			} while (x != -1);
			break;
		case 3:
			SeqListPopBack(&s);
			break;
		case 4:
			SeqListPopFront(&s);
			break;
		case 5:
			printf("请输入你要插入的数据\n");
			do
			{
				scanf("%d", &x);
				if (x != -1)
				{
					printf("请输入你要插入的下标,以-1结束：\n");
					scanf("%d", &pos);
					SeqListInsert(&s,pos,x);
				}
			}while (x != -1);
			break;
		case 6:
			printf("请输入你要删除的下标，以-1结束：\n");
			do
			{
				scanf("%d", &x);
				if (x != -1)
				{
					SeqListErase(&s, x);
				}
			} while (x != -1);
			break;
		case 7:
			printf("请输入你要查找的数据，以-1结束：\n");
			do
			{
				scanf("%d", &x);
				if (x != -1)
				{
					int ret=SeqListSearch(&s, x);
					if (ret == -1)
					{
						printf("该数字不存在\n");
					}
					else
					{
						printf("该数字存在，且下标为:%d", ret);
					}
				}
			} while (x != -1);
			break;
		case 8:
			printf("请输入你要修改的数据\n");
			do
			{
				scanf("%d", &x);
				if (x != -1)
				{
					printf("请输入你要修改的下标,以-1结束：\n");
					scanf("%d", &pos);
					SeqListModify(&s, pos, x);
				}
			} while (x != -1);
			break;
		case 9:
			SeqListPrint(&s);
			break;
		case 0:
			printf("退出程序!\n");
			break;
		default:
			printf("输入错误，请重新输入!\n");
			break;
		}
	} while (input);
	DistroySeqList(&s);
	return 0;
}
