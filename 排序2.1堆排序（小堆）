#include<stdio.h>
void Swap(int* p1, int* p2)
{
	int tmp = *p1;
	*p1 = *p2;
	*p2 = tmp;
}
void AdjustDown(int* arr, int sz, int root)
{
	int parent = root;
	int child = parent * 2 + 1;//默认是左孩子
	while (child < sz)//child的下标小于sz
	{
		//选出两个孩子比较小的那个
		if ((child + 1 < sz) && (arr[child + 1] < arr[child]))
		{//child+1是为了避免右孩子的下标超过sz，可能没有右孩子
			child += 1;//此时的child的右孩子
		}
		if (arr[child] < arr[parent])
		{
			Swap(&arr[child],&arr[parent]);//如果较小的孩子比双亲节点小，就交换
			parent = child;//将较小的孩子的坐标给双亲节点
			child = parent * 2 + 1;//继续找到左孩子进行下一次的调整
		}
		else
		{
			break;//当没有孩子比双亲小时，结束循环
		}
	}

}
void HeapSort(int* arr, int sz)
{
	int i = 0;
	//将所有子树都调成小堆
	for (i=(sz-1-1)/2;i>=0;i--)//从倒数第一个非叶子结点的子树开始调整成小堆
	{
		AdjustDown(arr,sz, i);
	}
}
int main()
{
	int arr[] = { 4,2,0,5,9,7,3,1,6,8 };
	int sz = sizeof(arr) / sizeof(int);
	HeapSort(arr, sz);
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%d ", arr[i]);
	}
	return 0;
}
